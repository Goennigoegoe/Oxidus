[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.inject]
workspace = false
script = '''
#!/bin/bash
pid=$(pidof tf_linux64)
if [ -z "$pid" ]; then
    echo "tf2 not running"
    exit 1
fi

echo $pid
lib_path=$(cargo build --message-format=json | jq -r 'select(.profile.test == false) | select(.target.name == "oxidus" ) | .filenames[0]')
#lib_path=./target/debug/liboxidus.so
if [ ! -f "$lib_path" ]; then
    echo "liboxidus.so not found"
    exit 1
fi

cp "$lib_path" /tmp/liboxidus.so

sudo rust-gdb -n -q -batch \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "set \$dlerror = (char* (*)(void))dlerror" \
    -ex "call \$dlopen(\"/tmp/liboxidus.so\", 2)" \
    -ex "call \$dlerror()" \
    -ex "detach" \
    -ex "quit"

if [ $? -ne 0 ]; then
    echo "failed to inject"
    exit 1
fi
'''


[tasks.inject-gdb]
workspace = false
script = '''
#!/bin/bash
pid=$(pidof tf_linux64)
if [ -z "$pid" ]; then
    echo "tf2 not running"
    exit 1
fi

echo $pid
lib_path=$(cargo build --message-format=json | jq -r 'select(.profile.test == false) | select(.target.name == "oxidus" ) | .filenames[0]')
if [ ! -f "$lib_path" ]; then
    echo "liboxidus.so not found"
    exit 1
fi

cp "$lib_path" /tmp/liboxidus.so

sudo rust-gdb -q \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "set \$dlerror = (char* (*)(void))dlerror" \
    -ex "call \$dlopen(\"/tmp/liboxidus.so\", 2)" \
    -ex "call \$dlerror()" \
    -ex "continue"

if [ $? -ne 0 ]; then
    echo "failed to inject"
    exit 1
fi
'''

[tasks.unload]
workspace = false
script = '''
#!/bin/bash
pid=$(pidof tf_linux64)
if [ -z "$pid" ]; then
    echo "tf2 not running"
    exit 1
fi

sudo rust-gdb -n -q -batch \
    -ex "set solib-search-path ~/.local/share/Steam/steamapps/common/Team Fortress 2/bin/linux64:/usr/lib:/lib:/lib64" \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "set \$dlclose = (int (*)(void*))dlclose" \
    -ex "set \$dlerror = (char* (*)(void))dlerror" \
    -ex "set \$self = \$dlopen(\"/tmp/liboxidus.so\", 6)" \
    -ex "call \$dlerror()" \
    -ex "call oxidus_cleanup()" \
    -ex "call \$dlclose(\$self)" \
    -ex "call \$dlerror()" \
    -ex "call \$dlclose(\$self)" \
    -ex "call \$dlerror()" \
    -ex "detach" \
    -ex "quit"

if [ $? -ne 0 ]; then
    echo "failed to unload"
    exit 1
fi

rm /tmp/liboxidus.so
'''

[tasks.start-tf2]
workspace = false
script = '''
pkill -9 tf_linux64 || true

cd ~/.local/share/Steam/steamapps/common/Team\ Fortress\ 2
export RUST_BACKTRACE=FULL;
export LD_LIBRARY_PATH='bin/linux64';
#export LD_DEBUG=all;
#export LD_DEBUG=libs;
export DXVK_HUD=1
./tf_linux64 -game tf -steam -novid -nojoy -nosteamcontroller -nohltv -particles 1 -precachefontchars -noquicktime -nobreakpad -gl
#ltrace -f -o ~/ltrace.log ./tf_linux64 -game tf -steam -novid -nojoy -nosteamcontroller -nohltv -particles 1 -precachefontchars -noquicktime -nobreakpad
#strace -f -o ~/strace.log ./tf_linux64 -game tf -steam -novid -nojoy -nosteamcontroller -nohltv -particles 1 -precachefontchars -noquicktime -nobreakpad
'''

[tasks.attach-gdb]
workspace = false
script = '''
#!/bin/bash
pid=$(pidof tf_linux64)
if [ -z "$pid" ]; then
    echo "TF2 not running"
    exit 1
fi

sudo rust-gdb -q \
    -ex "set solib-search-path ~/.local/share/Steam/steamapps/common/Team Fortress 2/bin/linux64" \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "tui enable" \
    -ex "continue" 
'''

[tasks.maps]
workspace = false
script = '''
#!/bin/bash
pid=$(pidof tf_linux64)
if [ -z "$pid" ]; then
    echo "TF2 not running"
    exit 1
fi
nvim /proc/$pid/maps
'''

[tasks.reload]
workspace = false
dependencies = ["build", "unload", "inject"]

[tasks.default]
dependencies = ["build"]
